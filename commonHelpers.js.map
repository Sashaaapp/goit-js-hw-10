{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["// Описаний в документації\nimport flatpickr from \"flatpickr\";\n// Додатковий імпорт стилів\nimport \"flatpickr/dist/flatpickr.min.css\";\n\n// Описаний у документації\nimport iziToast from \"izitoast\";\n// Додатковий імпорт стилів\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\n\n\nconst startButton = document.querySelector('[data-start]');\nlet timerActive = false;\nlet timerInterval;\n\nconst input = document.querySelector('#datetime-picker');\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const userSelectedDate = selectedDates[0];\n    const now = new Date();\n\n    if (userSelectedDate <= now || isNaN(userSelectedDate)) {\n      iziToast.error({\n        // title: 'Помилка',\n        message: 'Please choose a valid future date before starting the timer.',\n      });\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n    }\n  },\n};\n\nconst datePicker = flatpickr(input, options);\n\nfunction addLeadingZero(value) {\n  return value.toString().padStart(2, '0');\n}\n\nfunction updateTimer() {\n  const now = new Date();\n  const userSelectedDate = datePicker.selectedDates[0];\n  const timeDiff = userSelectedDate - now;\n\n  if (timeDiff <= 0) {\n    clearInterval(timerInterval);\n    iziToast.success({\n      // title: 'Успіх',\n      message: 'The timer has reached zero!',\n    });\n    startButton.disabled = true;\n    timerActive = false;\n    return;\n  }\n\n  const { days, hours, minutes, seconds } = convertMs(timeDiff);\n  document.querySelector('[data-days]').textContent = addLeadingZero(days);\n  document.querySelector('[data-hours]').textContent = addLeadingZero(hours);\n  document.querySelector('[data-minutes]').textContent = addLeadingZero(minutes);\n  document.querySelector('[data-seconds]').textContent = addLeadingZero(seconds);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nstartButton.addEventListener('click', function () {\n  const userSelectedDate = datePicker.selectedDates[0];\n\n  if (userSelectedDate && !timerActive) {\n    timerInterval = setInterval(updateTimer, 1000);\n    this.disabled = true;\n    timerActive = true;\n  } else if (!userSelectedDate) {\n    iziToast.error({\n      // title: 'Помилка',\n      message: 'Please choose a valid future date before starting the timer.',\n    });\n  } else {\n    console.log('Timer is already active.');\n  }\n});\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  const userSelectedDate = datePicker.selectedDates[0];\n  if (userSelectedDate && !timerActive) {\n    startButton.disabled = false;\n    updateTimer(); \n  } else {\n    startButton.disabled = true;\n  }\n});\n\n\n\n\n\n// const startButton = document.querySelector('[data-start]');\n// let timerActive = false;\n// let timerInterval;\n\n// const input = document.querySelector('#datetime-picker');\n// const options = {\n//   enableTime: true,\n//   time_24hr: true,\n//   defaultDate: new Date(),\n//   minuteIncrement: 1,\n//   onClose(selectedDates) {\n//     const userSelectedDate = selectedDates[0];\n//     const now = new Date();\n\n//     if (userSelectedDate <= now || isNaN(userSelectedDate)) {\n//       iziToast.error({\n//         title: 'Помилка',\n//         message: 'Будь ласка, виберіть дату та час у майбутньому',\n//       });\n//       startButton.disabled = true;\n//     } else {\n//       startButton.disabled = false;\n//     }\n//   },\n// };\n\n// const datePicker = flatpickr(input, options);\n\n// function addLeadingZero(value) {\n//   return value.toString().padStart(2, '0');\n// }\n\n// function updateTimer() {\n//   const now = new Date();\n//   const userSelectedDate = datePicker.selectedDates[0];\n//   const timeDiff = userSelectedDate - now;\n\n//   if (timeDiff <= 0) {\n//     clearInterval(timerInterval);\n//     iziToast.success({\n//       title: 'Успіх',\n//       message: 'Таймер досяг нуля!',\n//     });\n//     startButton.disabled = true;\n//     timerActive = false;\n//     return;\n//   }\n\n//   const { days, hours, minutes, seconds } = convertMs(timeDiff);\n//   document.querySelector('[data-days]').textContent = addLeadingZero(days);\n//   document.querySelector('[data-hours]').textContent = addLeadingZero(hours);\n//   document.querySelector('[data-minutes]').textContent = addLeadingZero(minutes);\n//   document.querySelector('[data-seconds]').textContent = addLeadingZero(seconds);\n// }\n\n// function convertMs(ms) {\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   const days = Math.floor(ms / day);\n//   const hours = Math.floor((ms % day) / hour);\n//   const minutes = Math.floor(((ms % day) % hour) / minute);\n//   const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//   return { days, hours, minutes, seconds };\n// }\n\n// startButton.addEventListener('click', function () {\n//   const userSelectedDate = datePicker.selectedDates[0];\n\n//   if (userSelectedDate && !timerActive) {\n//     timerInterval = setInterval(updateTimer, 1000);\n//     this.disabled = true;\n//     timerActive = true;\n//   } else if (!userSelectedDate) {\n//     iziToast.error({\n//       title: 'Помилка',\n//       message: 'Будь ласка, виберіть дійсну дату у майбутньому перед запуском таймера.',\n//     });\n//   } else {\n//     console.log('Таймер вже активний.');\n//   }\n// });\n\n// document.addEventListener('DOMContentLoaded', function () {\n//   const userSelectedDate = datePicker.selectedDates[0];\n//   if (userSelectedDate && !timerActive) {\n//     startButton.disabled = false;\n//   } else {\n//     startButton.disabled = true;\n//   }\n// });\n\n\n\n\n\n\n// const startButton = document.querySelector('[data-start]');\n// let timerActive = false;\n// let timerInterval;\n\n// const input = document.querySelector('#datetime-picker');\n// const options = {\n//   enableTime: true,\n//   time_24hr: true,\n//   defaultDate: new Date(),\n//   minuteIncrement: 1,\n//   onClose(selectedDates) {\n//     const userSelectedDate = selectedDates[0];\n//     const now = new Date();\n\n//     if (userSelectedDate <= now || isNaN(userSelectedDate)) {\n//       alert('Please choose a valid date and time in the future');\n//       startButton.disabled = true;\n//     } else {\n//       startButton.disabled = false;\n//     }\n//   },\n// };\n\n// const datePicker = flatpickr(input, options);\n\n// function updateTimer() {\n//   const now = new Date();\n//   const userSelectedDate = datePicker.selectedDates[0];\n//   const timeDiff = userSelectedDate - now;\n\n//   if (timeDiff <= 0) {\n//     clearInterval(timerInterval);\n//     alert('Timer reached zero!');\n//     startButton.disabled = true;\n//     timerActive = false;\n//     return;\n//   }\n\n//   // Update the timer display here\n// }\n\n// startButton.addEventListener('click', function () {\n//   const userSelectedDate = datePicker.selectedDates[0];\n\n//   if (userSelectedDate && !timerActive) {\n//     timerInterval = setInterval(updateTimer, 1000);\n//     this.disabled = true;\n//     timerActive = true;\n//   } else if (!userSelectedDate) {\n//     alert('Please choose a valid future date before starting the timer.');\n//   } else {\n//     console.log('Timer is already active.');\n//   }\n// });\n\n// document.addEventListener('DOMContentLoaded', function () {\n//   const userSelectedDate = datePicker.selectedDates[0];\n//   if (userSelectedDate && !timerActive) {\n//     startButton.disabled = false;\n//   } else {\n//     startButton.disabled = true;\n//   }\n// });\n"],"names":["startButton","timerActive","timerInterval","input","options","selectedDates","userSelectedDate","now","iziToast","datePicker","flatpickr","addLeadingZero","value","updateTimer","timeDiff","days","hours","minutes","seconds","convertMs","ms"],"mappings":"2GAaA,MAAMA,EAAc,SAAS,cAAc,cAAc,EACzD,IAAIC,EAAc,GACdC,EAEJ,MAAMC,EAAQ,SAAS,cAAc,kBAAkB,EACjDC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAmBD,EAAc,GACjCE,EAAM,IAAI,KAEZD,GAAoBC,GAAO,MAAMD,CAAgB,GACnDE,EAAS,MAAM,CAEb,QAAS,8DACjB,CAAO,EACDR,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,EAEMS,EAAaC,EAAUP,EAAOC,CAAO,EAE3C,SAASO,EAAeC,EAAO,CAC7B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CACzC,CAEA,SAASC,GAAc,CACrB,MAAMN,EAAM,IAAI,KAEVO,EADmBL,EAAW,cAAc,GACdF,EAEpC,GAAIO,GAAY,EAAG,CACjB,cAAcZ,CAAa,EAC3BM,EAAS,QAAQ,CAEf,QAAS,6BACf,CAAK,EACDR,EAAY,SAAW,GACvBC,EAAc,GACd,MACD,CAED,KAAM,CAAE,KAAAc,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAQ,EAC5D,SAAS,cAAc,aAAa,EAAE,YAAcH,EAAeI,CAAI,EACvE,SAAS,cAAc,cAAc,EAAE,YAAcJ,EAAeK,CAAK,EACzE,SAAS,cAAc,gBAAgB,EAAE,YAAcL,EAAeM,CAAO,EAC7E,SAAS,cAAc,gBAAgB,EAAE,YAAcN,EAAeO,CAAO,CAC/E,CAEA,SAASC,EAAUC,EAAI,CAMrB,MAAML,EAAO,KAAK,MAAMK,EAAK,KAAG,EAC1BJ,EAAQ,KAAK,MAAOI,EAAK,MAAO,IAAI,EACpCH,EAAU,KAAK,MAAQG,EAAK,MAAO,KAAQ,GAAM,EACjDF,EAAU,KAAK,MAASE,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEAlB,EAAY,iBAAiB,QAAS,UAAY,CAChD,MAAMM,EAAmBG,EAAW,cAAc,GAE9CH,GAAoB,CAACL,GACvBC,EAAgB,YAAYW,EAAa,GAAI,EAC7C,KAAK,SAAW,GAChBZ,EAAc,IACJK,EAMV,QAAQ,IAAI,0BAA0B,EALtCE,EAAS,MAAM,CAEb,QAAS,8DACf,CAAK,CAIL,CAAC,EAED,SAAS,iBAAiB,mBAAoB,UAAY,CAC/BC,EAAW,cAAc,IAC1B,CAACR,GACvBD,EAAY,SAAW,GACvBa,KAEAb,EAAY,SAAW,EAE3B,CAAC"}